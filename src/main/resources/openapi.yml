openapi: 3.0.3
info:
  title: API de Gestión de Tareas
  description: API para gestionar tareas, usuarios y estados de tareas
  version: 1.0.0
  contact:
    name: Task Management API Support
    url: https://www.taskmanagement.com
    email: contacto@taskmanagement.com
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/

servers:
  - url: http://localhost:8080
    description: Servidor de desarrollo

tags:
  - name: Autenticación
    description: Operaciones relacionadas con la autenticación de usuarios
  - name: Estado de Tarea
    description: Operaciones relacionadas con los estados de las tareas
  - name: Tareas
    description: Operaciones relacionadas con las tareas
  - name: Usuarios
    description: Operaciones relacionadas con los usuarios

security:
  - bearerAuth: []

paths:
  /login:
    post:
      tags:
        - Autenticación
      summary: Iniciar sesión
      description: Autentica un usuario y retorna un token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Autenticación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/usuarios:
    post:
      tags:
        - Autenticación
      summary: Registrar nuevo usuario
      description: Registra un nuevo usuario en el sistema
      operationId: registrarUsuario
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioDTO'
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: El usuario ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/estados:
    get:
      tags:
        - Estado de Tarea
      summary: Obtener todos los estados de tarea
      description: Retorna una lista de todos los estados de tarea disponibles
      operationId: getAllEstados
      responses:
        '200':
          description: Lista de estados encontrada exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EstadoTarea'
    post:
      tags:
        - Estado de Tarea
      summary: Crear un nuevo estado de tarea
      description: Crea un nuevo estado de tarea con la información proporcionada
      operationId: crearEstado
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstadoTarea'
      responses:
        '201':
          description: Estado de tarea creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstadoTarea'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/estados/{id}:
    delete:
      tags:
        - Estado de Tarea
      summary: Eliminar un estado de tarea
      description: Elimina un estado de tarea por su ID
      operationId: deleteEstado
      parameters:
        - name: id
          in: path
          description: ID del estado de tarea a eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Estado de tarea eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstadoTarea'
        '404':
          description: Estado de tarea no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/tareas:
    get:
      tags:
        - Tareas
      summary: Obtener todas las tareas
      description: Retorna una lista de todas las tareas disponibles
      operationId: ObtenerTareas
      responses:
        '200':
          description: Lista de tareas encontrada exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TareaResponseDTO'
    post:
      tags:
        - Tareas
      summary: Crear una nueva tarea
      description: Crea una nueva tarea con la información proporcionada
      operationId: crearTarea
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TareaDTO'
      responses:
        '201':
          description: Tarea creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TareaResponseDTO'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuario o estado de tarea no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/tareas/{id}:
    get:
      tags:
        - Tareas
      summary: Obtener una tarea por ID
      description: Retorna una tarea específica por su ID
      operationId: getTareaById
      parameters:
        - name: id
          in: path
          description: ID de la tarea
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Tarea encontrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TareaResponseDTO'
        '404':
          description: Tarea no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Tareas
      summary: Actualizar una tarea
      description: Actualiza una tarea existente por su ID
      operationId: actualizarTarea
      parameters:
        - name: id
          in: path
          description: ID de la tarea a actualizar
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TareaDTO'
      responses:
        '200':
          description: Tarea actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TareaResponseDTO'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tarea, usuario o estado de tarea no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Tareas
      summary: Eliminar una tarea
      description: Elimina una tarea por su ID
      operationId: eliminarTarea
      parameters:
        - name: id
          in: path
          description: ID de la tarea a eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Tarea eliminada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TareaResponseDTO'
        '404':
          description: Tarea no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/usuarios:
    get:
      tags:
        - Usuarios
      summary: Obtener todos los usuarios
      description: Retorna una lista de todos los usuarios registrados
      operationId: getAllUsuarios
      responses:
        '200':
          description: Lista de usuarios encontrada exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsuarioResponseDTO'
    post:
      tags:
        - Usuarios
      summary: Crear un nuevo usuario
      description: Registra un nuevo usuario en el sistema
      operationId: createUsuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioDTO'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponseDTO'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: El usuario ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/usuarios/{id}:
    get:
      tags:
        - Usuarios
      summary: Obtener un usuario por ID
      description: Retorna un usuario específico por su ID
      operationId: getUsuarioById
      parameters:
        - name: id
          in: path
          description: ID del usuario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Usuario encontrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponseDTO'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Usuarios
      summary: Actualizar un usuario
      description: Actualiza un usuario existente por su ID
      operationId: updateUsuario
      parameters:
        - name: id
          in: path
          description: ID del usuario a actualizar
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioDTO'
      responses:
        '200':
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponseDTO'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Usuarios
      summary: Eliminar un usuario
      description: Elimina un usuario por su ID
      operationId: deleteUsuario
      parameters:
        - name: id
          in: path
          description: ID del usuario a eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Usuario eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponseDTO'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token de autenticación

  schemas:
    EstadoTarea:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID único del estado de tarea
          example: 1
          readOnly: true
        nombreEstado:
          type: string
          description: Nombre del estado de la tarea
          example: "En progreso"
      required:
        - nombreEstado

    TareaDTO:
      type: object
      properties:
        titulo:
          type: string
          description: Título de la tarea
          example: "Implementar autenticación"
        descripcion:
          type: string
          description: Descripción detallada de la tarea
          example: "Implementar sistema de autenticación usando JWT"
        estadoTareaId:
          type: integer
          format: int64
          description: ID del estado de la tarea
          example: 1
        usuarioId:
          type: integer
          format: int64
          description: ID del usuario asignado a la tarea
          example: 1
      required:
        - titulo
        - descripcion
        - estadoTareaId
        - usuarioId

    TareaResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID único de la tarea
          example: 1
        titulo:
          type: string
          description: Título de la tarea
          example: "Implementar autenticación"
        descripcion:
          type: string
          description: Descripción detallada de la tarea
          example: "Implementar sistema de autenticación usando JWT"
        estadoTarea:
          $ref: '#/components/schemas/EstadoTarea'
        usuario:
          $ref: '#/components/schemas/UsuarioResponseDTO'

    UsuarioDTO:
      type: object
      properties:
        nombreUsuario:
          type: string
          description: Nombre de usuario único
          example: "john.perez"
        clave:
          type: string
          description: Contraseña del usuario (mínimo 8 caracteres, máximo 20)
          example: "password123"
          minLength: 8
          maxLength: 20
        correo:
          type: string
          format: email
          description: Correo electrónico del usuario
          example: "john.perez@example.com"
      required:
        - nombreUsuario
        - clave
        - correo

    UsuarioResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID único del usuario
          example: 1
        nombreUsuario:
          type: string
          description: Nombre de usuario
          example: "john.perez"
        correo:
          type: string
          format: email
          description: Correo electrónico del usuario
          example: "john.perez@example.com"

    ErrorResponse:
      type: object
      additionalProperties:
        type: string
      description: Objeto que contiene los mensajes de error
      example:
        "Mensaje": "Recurso no encontrado"
        "Status": "404 NOT_FOUND"

    LoginRequest:
      type: object
      properties:
        nombreUsuario:
          type: string
          description: Nombre de usuario
          example: "john.perez"
        clave:
          type: string
          description: Contraseña del usuario
          example: "password123"
      required:
        - nombreUsuario
        - clave

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: Token JWT para autenticación
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        usuario:
          $ref: '#/components/schemas/UsuarioResponseDTO' 